#!/bin/bash

# The pipeline to convert legacy *-mib.c files with structures into new DMF
# markup involves parsing the C code. The pycparser (Python module) used
# for this is picky about what view of C it accepts as pre-processed input.
# This script is a postprocessor of C preprocessor - removes __attribute__
# declarations and other extended constructs, which are not compatible with
# pycparser; also make sure to use no compiler optimizations (-O0 in gcc).
#
#    Copyright (C) 2016 Michal Vyskocil <MichalVyskocil@eaton.com>
#    Copyright (C) 2016 - 2021 Jim Klimov <EvgenyKlimov@eaton.com>
#

[ -n "${CPP-}" ] || CPP="cpp"
# Note that CWD may often be "DMF" or "DMF/somesubdir", so default for both
[ -n "${CPPFLAGS-}" ] || CPPFLAGS="-I../../include -I../../../include"
[ -n "${CFLAGS-}" ] || CFLAGS=""
[ -z "${CPP_ENV-}" ] || eval export $CPP_ENV
[ "${DEBUG_NUT_CPP-}" = "true" ] || DEBUG_NUT_CPP=false

set -o pipefail
#set -exv

# Hush when "make V=0"
if [ x"${DEBUG-}" = x -o x"${DEBUG-}" = x1 -o x"${V-}" = x1 ] ; then
    echo "PREPROCESS: ( cd `pwd` && $CPP $CFLAGS $CPPFLAGS $* )" >&2
fi

do_filter() {

if [ "${DEBUG_NUT_CPP_DISABLE_FILTER-}" = "true" ] ; then
    cat
    return
fi

# tee temp-cpp-orig.tmp | \
sed \
    -e '/^[ \t]*$/d' \
    -e 's/^[ \t]*;/;/g' | \
perl -0pe 's/\n([^#].*)\n;/\n$1;\n/g' | \
sed \
    -e 's/ __asm *(.*) *$/;/g' \
    -e 's/__asm__ *(.*) *;/;/g' \
    -e 's/__attribute__ *(([ *__[A-Za-z0-9_-]*__ *([^()]*))) */ /g' \
    -e 's/__attribute__ *(([^()]*)) */ /g' \
    -e 's/__inline__/inline/g' \
    -e 's/__signed__/signed/g' \
    -e 's/__unsigned__/unsigned/g' \
    -e 's/__THROW;$/;/' \
    -e 's/__END_DECLS//g' \
    -e 's/__BEGIN_DECLS//g' \
    -e 's/void (\*signal(int, void (\*)(int)))(int);//g' \
    -e 's/static __inline/static/g' \
    -e 's/static[ \t]*;/;/g' \
    -e 's/__extern_inline/extern/g' \
    -e 's/extern __inline/extern/g' \
    -e 's/_Float[0-9]*x*/float/g' \
    -e 's/__restrict//g' \
    -e 's/__extension__//g' \
    -e 's/[ \t]_Noreturn[ \t]/ /g' \
    -e 's/__NORETURN_*//g' \
    -e 's/__builtin_va_list/int/g'
} # // end of do_filter()

# Repeat same filter a few times to strip appearing blank lines and trailing semicolons
$CPP $CFLAGS $CPPFLAGS "${@}" | \
    do_filter | \
    do_filter | \
    do_filter \
    | if $DEBUG_NUT_CPP ; then tee temp-cpp-filt.tmp ; else cat ; fi

RET=$?
if [ "$RET" = 0 ]; then
    # Hush when "make V=0"
    if [ x"${DEBUG-}" = x -o x"${DEBUG-}" = x1 -o x"${V-}" = x1 ] ; then
        echo "INFO: CPP+SED passed OK" >&2
    fi
else
    echo "ERROR: CPP+SED returned code $RET" >&2
    # Invalidate the C code so pycparser detects the problem early
    echo '#invalid-pragma-error FAILED TO PARSE CPP+SED'
fi

exit $RET
